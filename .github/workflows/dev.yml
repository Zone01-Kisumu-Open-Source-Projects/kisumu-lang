name: KSM Dev CI/CD Pipeline

on:
  pull_request:
    branches:
      - alpha
      - "beta/*"
      - dev
  push:
    branches:
      - alpha
      - "beta/*"
      - dev

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22', '1.23']
    runs-on: ${{ matrix.platform }}
    name: Build and Test on ${{ matrix.platform }} with Go ${{ matrix.go-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Debug environment
        run: |
          echo "Running on ${{ runner.os }}"
          echo "Job matrix:"
          echo "Platform: ${{ matrix.platform }}"
          echo "Go: ${{ matrix.go-version }}"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Install tools
        run: |
          go install golang.org/x/tools/cmd/godoc@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Format check
        run: |
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "Unformatted files:"
            echo "$unformatted"
            exit 1
          fi

      - name: Run linters
        uses: golangci/golangci-lint-action@v6.1.1
        with:
          version: latest
          args: --timeout=5m --enable=gosec --enable=staticcheck

      - name: Build
        run: make build

      - name: Run tests
        run: |
          go test -v -coverprofile=coverage.out -covermode=atomic ./... | tee tests.log
          go tool cover -func=coverage.out

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.platform }}-go${{ matrix.go-version }}
          path: coverage.out

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.platform }}-go${{ matrix.go-version }}
          path: tests.log

      - name: Generate docs (non-Windows)
        if: matrix.platform != 'windows-latest'
        run: |
          godoc -http=:6060 &
          sleep 5
          curl -s http://localhost:6060/pkg/ > docs.log
          cat docs.log

      - name: Notify failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "‚ùå Pipeline failed on ${{ matrix.platform }} with Go ${{ matrix.go-version }}\n\n" +
                    "View the [run details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            })
