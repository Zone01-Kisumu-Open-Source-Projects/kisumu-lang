name: KSM Dev CI/CD Pipeline

on:
  pull_request:
    branches:
      - alpha
      - "beta/*"
      - dev
  push:
    branches:
      - alpha
      - "beta/*"
      - dev

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu
          - macOS
          - windows
        go:
          - 21
          - 22
          - 23
    runs-on: ${{ matrix.platform }}-latest
    name: Build and Test on ${{ matrix.platform }} with Go 1.${{ matrix.go }}.x

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}-

      - name: Set up Go environment
        uses: actions/setup-go@v5
        with:
          go-version: 1.${{ matrix.go }}.x

      - name: Install dependencies
        run: go mod tidy

      - name: Check formatting
        run: |
          gofmt -l . | tee fmt.log
          if [ -s fmt.log ]; then
            echo "Code is not formatted. Please run 'gofmt -w -l -s .'"
            exit 1
          fi

      - name: Lint code
        uses: golangci/golangci-lint-action@v6.1.1
        with:
          args: "--timeout=5m"

      - name: Run static analysis
        run: |
          go vet ./...
          staticcheck ./...

      - name: Build binaries
        run: |
          make build

      - name: Run unit tests
        run: |
          go test -v ./... | tee tests.log
        continue-on-error: true

      - name: Generate Coverage Report
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
        continue-on-error: false

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: tests.log

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "ðŸš¨ CI/CD pipeline failed! Please check the logs."
            })
      - name: Generate documentation
        run: |
          godoc -http=:6060 &
          sleep 5
          curl -s http://localhost:6060/pkg/ > docs.log
